within ;
package ERIGridMultiEnergyBenchmark

  model ThermalNetwork
    DisHeatLib.Pipes.DualPipe pipe_l2(
      show_T=true,
      redeclare package Medium = IBPSA.Media.Water,
      redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
      L=500,
      nPorts1=1,
      nPorts2=1)
      annotation (Placement(transformation(extent={{-70,-24},{-50,-4}})));
    DisHeatLib.Supply.Supply_pT supply_pT(
      redeclare package Medium = IBPSA.Media.Water,
      show_T=true,
      Q_flow_nominal(displayUnit="MW") = 1500000,
      TemSup_nominal=348.15,
      TemRet_nominal=313.15,
      isElectric=false,
      powerCha(Q_flow={0}, P={0}),
      dp_nominal=600000,
      SupplyTemperature=DisHeatLib.Supply.BaseClasses.InputTypeSupplyTemp.Constant,
      TemOut_min=283.15,
      TemOut_max=283.15,
      TemSup_min=283.15,
      TemSup_max=283.15,
      dp_controller=true,
      dp_min=100000,
      dp_set=100000,
      dp_max=1000000,
      ports_b,
      heater(show_T=true),
      nPorts=1)
      annotation (Placement(transformation(extent={{-190,0},{-170,20}})));

    DisHeatLib.Boundary.SoilTemperature soilTemperature(
      inputType=DisHeatLib.Boundary.BaseClasses.InputTypeSoilTemp.Constant,
      T_const(displayUnit="degC") = 283.15,
      T_mean=283.15,
      T_amp(displayUnit="degC") = 10,
      t_min=0) annotation (Placement(transformation(extent={{30,100},{50,80}})));
    Modelica.Blocks.Sources.RealExpression dp_measure_min(y=min([consumer1.senRelPre.p_rel,
          consumer2.senRelPre.p_rel]))
      annotation (Placement(transformation(extent={{-160,20},{-180,40}})));
    DisHeatLib.Pipes.DualPipe pipe_l4(
      show_T=true,
      redeclare package Medium = IBPSA.Media.Water,
      redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
      L=500,
      nPorts2=1,
      nPorts1=1)
      annotation (Placement(transformation(extent={{30,-24},{50,-4}})));
    Components.Consumer consumer1(fileName=fileNameConsumer1)
      annotation (Placement(transformation(extent={{0,40},{-20,60}})));
    Components.Consumer consumer2(fileName=fileNameConsumer2)
      annotation (Placement(transformation(extent={{100,40},{80,60}})));
    IBPSA.Fluid.FixedResistances.Junction junction_n4r(
      redeclare package Medium = IBPSA.Media.Water,
      m_flow_nominal={10,-20,10},
      dp_nominal={10,-10,10})
      annotation (Placement(transformation(extent={{20,-10},{0,-30}})));
    DisHeatLib.Pipes.DualPipe pipe_l3(
      show_T=true,
      redeclare package Medium = IBPSA.Media.Water,
      redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
      L=10,
      nPorts2=1,
      nPorts1=1)
      annotation (Placement(transformation(extent={{-10,-10},{10,10}},
          rotation=90,
          origin={-10,20})));
    DisHeatLib.Pipes.DualPipe pipe_l5(
      show_T=true,
      redeclare package Medium = IBPSA.Media.Water,
      redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
      L=500,
      nPorts2=1,
      nPorts1=1)
      annotation (Placement(transformation(extent={{-10,-10},{10,10}},
          rotation=90,
          origin={90,20})));
    IBPSA.Fluid.FixedResistances.Junction junction_n6s(
      redeclare package Medium = IBPSA.Media.Water,
      m_flow_nominal={20,-10,-10},
      dp_nominal={10,-10,-10})
      annotation (Placement(transformation(extent={{60,2},{80,-18}})));
    IBPSA.Fluid.FixedResistances.Junction junction_n6r(
      redeclare package Medium = IBPSA.Media.Water,
      m_flow_nominal={10,-20,10},
      dp_nominal={10,-10,10})
      annotation (Placement(transformation(extent={{120,-10},{100,-30}})));
    DisHeatLib.Pipes.DualPipe pipe_l6(
      show_T=true,
      redeclare package Medium = IBPSA.Media.Water,
      redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
      L=10,
      nPorts1=1,
      nPorts2=1)
      annotation (Placement(transformation(extent={{130,-24},{150,-4}})));
    DisHeatLib.Pipes.DualPipe pipe_l1(
      show_T=true,
      redeclare package Medium = IBPSA.Media.Water,
      redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
      L=500,
      nPorts2=1,
      nPorts1=1)
      annotation (Placement(transformation(extent={{-160,-24},{-140,-4}})));
    Components.Bypass bypass(m_flow_nominal=2, dpValve_nominal=100000)
      annotation (Placement(transformation(
          extent={{-10,-10},{10,10}},
          rotation=-90,
          origin={180,-14})));
    IBPSA.Fluid.FixedResistances.Junction junction_n4s(
      redeclare package Medium = IBPSA.Media.Water,
      m_flow_nominal={20,-10,-10},
      dp_nominal={10,-10,-10})
      annotation (Placement(transformation(extent={{-40,2},{-20,-18}})));
    IBPSA.Fluid.Actuators.Valves.TwoWayLinear valve_grid_v1(
      redeclare package Medium = IBPSA.Media.Water,
      m_flow_nominal=20,
      CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
      dpValve_nominal=10)
      annotation (Placement(transformation(extent={{-130,-18},{-110,2}})));
    Components.PowerToHeat powerToHeat
      annotation (Placement(transformation(extent={{-100,-24},{-80,-4}})));
    Modelica.Blocks.Interfaces.RealInput valve_grid_v1_setpoint annotation (
        Placement(transformation(
          extent={{-20,-20},{20,20}},
          rotation=-90,
          origin={-120,126})));
    Modelica.Blocks.Interfaces.RealInput mdot_condenser_in annotation (Placement(
          transformation(
          extent={{20,-20},{-20,20}},
          rotation=-90,
          origin={-160,-106})));
    Modelica.Blocks.Interfaces.RealInput T_condenser_out annotation (Placement(
          transformation(
          extent={{20,-20},{-20,20}},
          rotation=-90,
          origin={-100,-106})));
    Modelica.Blocks.Interfaces.RealInput mdot_tank_out annotation (Placement(
          transformation(
          extent={{20,-20},{-20,20}},
          rotation=-90,
          origin={-40,-106})));
    Modelica.Blocks.Interfaces.RealOutput P_el_heatpump annotation (Placement(
          transformation(
          extent={{-10,-11},{10,11}},
          rotation=-90,
          origin={40,-109})));
    Modelica.Blocks.Interfaces.RealOutput T_tank_low annotation (Placement(
          transformation(
          extent={{-10,-11},{10,11}},
          rotation=-90,
          origin={100,-109})));
    Modelica.Blocks.Interfaces.RealOutput T_tank_high annotation (Placement(
          transformation(
          extent={{-10,-11},{10,11}},
          rotation=-90,
          origin={160,-109})));
    parameter String fileNameConsumer1="modelica://ERIGridMultiEnergyBenchmark/Resources/simple_profile_consumer1_1day.txt" "File where matrix is stored";
    parameter String fileNameConsumer2="modelica://ERIGridMultiEnergyBenchmark/Resources/simple_profile_consumer2_1day.txt" "File where matrix is stored";
  equation
    connect(soilTemperature.port,pipe_l2. port_ht)
      annotation (Line(points={{40,80},{40,70},{-60,70},{-60,-4}},
                                                   color={191,0,0}));
    connect(supply_pT.dp_measure,dp_measure_min. y)
      annotation (Line(points={{-186,22},{-186,30},{-181,30}},
                                                            color={0,0,127}));
    connect(soilTemperature.port,pipe_l4. port_ht) annotation (Line(points={{40,80},
            {40,-4}},                        color={191,0,0}));
    connect(junction_n4s.port_1, pipe_l2.ports_b1[1])
      annotation (Line(points={{-40,-8},{-50,-8}},   color={0,127,255}));
    connect(junction_n4s.port_2, pipe_l4.port_a1)
      annotation (Line(points={{-20,-8},{30,-8}},   color={0,127,255}));
    connect(pipe_l4.ports_b2[1], junction_n4r.port_1)
      annotation (Line(points={{30,-20},{28,-20},{28,-18},{26,-18},{26,-20},{20,-20}},
                                                   color={0,127,255}));
    connect(junction_n4s.port_3, pipe_l3.port_a1) annotation (Line(points={{-30,2},
            {-30,6},{-16,6},{-16,10}},           color={0,127,255}));
    connect(junction_n4r.port_3, pipe_l3.ports_b2[1]) annotation (Line(points={{10,-10},
            {10,6},{-4,6},{-4,10}},               color={0,127,255}));
    connect(pipe_l3.ports_b1[1], consumer1.port_b) annotation (Line(points={{-16,30},
            {-16,34},{-26,34},{-26,50},{-20,50}},         color={0,127,255}));
    connect(consumer1.port_a, pipe_l3.port_a2) annotation (Line(points={{0,50},{6,
            50},{6,34},{-4,34},{-4,30}},    color={0,127,255}));
    connect(junction_n6s.port_3, pipe_l5.port_a1) annotation (Line(points={{70,2},{
            70,6},{84,6},{84,10}},            color={0,127,255}));
    connect(pipe_l5.ports_b2[1], junction_n6r.port_3) annotation (Line(points={{96,10},
            {96,6},{110,6},{110,-10}},              color={0,127,255}));
    connect(pipe_l4.ports_b1[1], junction_n6s.port_1)
      annotation (Line(points={{50,-8},{60,-8}},   color={0,127,255}));
    connect(pipe_l5.ports_b1[1], consumer2.port_b) annotation (Line(points={{84,30},
            {84,34},{74,34},{74,50},{80,50}},     color={0,127,255}));
    connect(pipe_l5.port_a2, consumer2.port_a) annotation (Line(points={{96,30},{96,
            34},{106,34},{106,50},{100,50}},     color={0,127,255}));
    connect(junction_n6s.port_2, pipe_l6.port_a1)
      annotation (Line(points={{80,-8},{130,-8}},   color={0,127,255}));
    connect(pipe_l1.port_a1, supply_pT.ports_b[1]) annotation (Line(points={{-160,-8},
            {-166,-8},{-166,10},{-170,10}},              color={0,127,255}));
    connect(pipe_l1.ports_b2[1], supply_pT.port_a) annotation (Line(points={{-160,
            -20},{-194,-20},{-194,10},{-190,10}},        color={0,127,255}));
    connect(pipe_l5.port_ht, soilTemperature.port)
      annotation (Line(points={{80,20},{40,20},{40,80}},
                                                       color={191,0,0}));
    connect(pipe_l3.port_ht, soilTemperature.port) annotation (Line(points={{-20,20},
            {-60,20},{-60,70},{40,70},{40,80}},       color={191,0,0}));
    connect(pipe_l6.port_ht, soilTemperature.port) annotation (Line(points={{140,-4},
            {140,70},{40,70},{40,80}},          color={191,0,0}));
    connect(pipe_l6.ports_b1[1], bypass.port_a) annotation (Line(points={{150,-8},
            {160,-8},{160,6},{180,6},{180,-4}},            color={0,127,255}));
    connect(pipe_l6.port_a2, bypass.port_b) annotation (Line(points={{150,-20},{160,
            -20},{160,-34},{180,-34},{180,-24}},      color={0,127,255}));
    connect(pipe_l1.ports_b1[1], valve_grid_v1.port_a)
      annotation (Line(points={{-140,-8},{-130,-8}},   color={0,127,255}));
    connect(powerToHeat.port_a1, valve_grid_v1.port_b)
      annotation (Line(points={{-100,-8},{-110,-8}}, color={0,127,255}));
    connect(powerToHeat.port_b1, pipe_l2.port_a1)
      annotation (Line(points={{-80,-8},{-70,-8}}, color={0,127,255}));
    connect(powerToHeat.port_ht, soilTemperature.port) annotation (Line(points={{-90,
            -4},{-90,20},{-60,20},{-60,70},{40,70},{40,80}}, color={191,0,0}));
    connect(pipe_l1.port_ht, soilTemperature.port) annotation (Line(points={{-150,
            -4},{-150,20},{-60,20},{-60,70},{40,70},{40,80}}, color={191,0,0}));
    connect(valve_grid_v1_setpoint, valve_grid_v1.y)
      annotation (Line(points={{-120,126},{-120,4}}, color={0,0,127}));
    connect(powerToHeat.mdot_condenser_in, mdot_condenser_in) annotation (Line(
          points={{-99,-25},{-99,-68},{-160,-68},{-160,-106}}, color={0,0,127}));
    connect(powerToHeat.mdot_tank_out, mdot_tank_out) annotation (Line(points={{-91,
            -25},{-91,-72},{-40,-72},{-40,-106}}, color={0,0,127}));
    connect(powerToHeat.P_el_heatpump, P_el_heatpump) annotation (Line(points={{-87,
            -24.5},{-87,-68},{40,-68},{40,-109}}, color={0,0,127}));
    connect(powerToHeat.T_tank_low, T_tank_low) annotation (Line(points={{-84,-24.5},
            {-84,-64},{100,-64},{100,-109}}, color={0,0,127}));
    connect(powerToHeat.T_tank_high, T_tank_high) annotation (Line(points={{-81,-24.5},
            {-81,-60},{160,-60},{160,-109}}, color={0,0,127}));
    connect(powerToHeat.T_condenser_out, T_condenser_out) annotation (Line(points=
           {{-95,-25},{-95,-72},{-100,-72},{-100,-106}}, color={0,0,127}));
    connect(powerToHeat.port_a2, pipe_l2.ports_b2[1])
      annotation (Line(points={{-80,-20},{-70,-20}}, color={0,127,255}));
    connect(pipe_l2.port_a2, junction_n4r.port_2)
      annotation (Line(points={{-50,-20},{0,-20}}, color={0,127,255}));
    connect(pipe_l4.port_a2, junction_n6r.port_2)
      annotation (Line(points={{50,-20},{100,-20}}, color={0,127,255}));
    connect(junction_n6r.port_1, pipe_l6.ports_b2[1])
      annotation (Line(points={{120,-20},{130,-20}}, color={0,127,255}));
    connect(pipe_l1.port_a2, powerToHeat.port_b2)
      annotation (Line(points={{-140,-20},{-100,-20}}, color={0,127,255}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,-100},
              {200,120}}),     graphics={Rectangle(
            extent={{-200,120},{200,-100}},
            lineColor={0,0,0},
            fillColor={227,221,16},
            fillPattern=FillPattern.Solid,
            radius=35)}),       Diagram(coordinateSystem(preserveAspectRatio=
              false, extent={{-200,-100},{200,120}})),
      experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
  end ThermalNetwork;

  package Components
    model Consumer
      DisHeatLib.Demand.Demand demand(
        redeclare package Medium = IBPSA.Media.Water,
        allowFlowReversal=true,
        show_T=true,
        from_dp=true,
        dp_nominal(displayUnit="bar") = 100000,
        Q_flow_nominal(displayUnit="kW") = 600000,
        TemSup_nominal=348.15,
        TemRet_nominal=308.15,
        heatLoad=DisHeatLib.Demand.BaseClasses.InputTypeDemand.FileQ,
        scaling=1000,
        tableName=tableName,
        fileName=fileName,
        redeclare DisHeatLib.Demand.BaseDemands.Radiator demandType)
        annotation (Placement(transformation(extent={{10,-70},{-10,-50}})));
      IBPSA.Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
            IBPSA.Media.Water)
        annotation (Placement(transformation(extent={{10,34},{-10,14}})));
      DisHeatLib.Substations.BaseStations.IndirectStation indirectStation(
        show_T=true,
        redeclare package Medium = IBPSA.Media.Water,
        from_dp=true,
        Q1_flow_nominal(displayUnit="kW") = 750000,
        TemSup1_nominal=348.15,
        TemRet1_nominal=308.15,
        dp1_nominal(displayUnit="bar") = 100000,
        TemSup2_nominal=348.15,
        TemRet2_nominal=308.15,
        OutsideDependent=false,
        Ti=60) annotation (Placement(transformation(extent={{10,-22},{-10,-2}})));
      extends IBPSA.Fluid.Interfaces.PartialTwoPort(
        redeclare package Medium = IBPSA.Media.Water);

      parameter String fileName="C:/Development/erigrid2/JRA-1.1-multi-energy/disheatlib_standalone/resources/heat/heat_demand_load_profile_test.txt"
        "File where matrix is stored"
            annotation(Dialog(loadSelector(filter="Text files(*.txt);;CSV files (*.csv)",caption="Open data file")));

      parameter String tableName="HeatDemand"
        "Table name on file or in function usertab (see docu)";
    equation
      connect(demand.port_b, indirectStation.port_a2) annotation (Line(points={{-10,-60},
              {-20,-60},{-20,-16.5455},{-10,-16.5455}},      color={0,127,255}));
      connect(demand.port_a, indirectStation.port_b2) annotation (Line(points={{10,-60},
              {20,-60},{20,-16.5455},{10,-16.5455}}, color={0,127,255}));
      connect(port_a, indirectStation.port_b1) annotation (Line(points={{-100,0},{-54,
              0},{-54,-5.63636},{-10,-5.63636}}, color={0,127,255}));
      connect(port_b, indirectStation.port_a1) annotation (Line(points={{100,0},{56,
              0},{56,-5.63636},{10,-5.63636}}, color={0,127,255}));
      connect(senRelPre.port_b, port_a) annotation (Line(points={{-10,24},{-54,24},{
              -54,0},{-100,0}}, color={0,127,255}));
      connect(senRelPre.port_a, port_b) annotation (Line(points={{10,24},{56,24},{56,
              0},{100,0}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={227,221,16},
              fillPattern=FillPattern.Solid,
              radius=15),
            Bitmap(
              extent={{-88,-88},{88,88}},
              imageSource=
                  ""
                   +
                  "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",
              fileName=
                  "modelica://ERIGridMultiEnergyBenchmark/Images/consumer.png"),
            Polygon(
              points={{-132,92},{-132,92}},
              lineColor={0,0,0},
              lineThickness=0.5,
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}),                      Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Consumer;

      model PowerToHeat
      extends IBPSA.Fluid.Interfaces.PartialFourPort(
        redeclare package Medium1 = IBPSA.Media.Water,
        redeclare package Medium2 = IBPSA.Media.Water);

      IBPSA.Fluid.FixedResistances.Junction junction_n3s(
        redeclare package Medium = IBPSA.Media.Water,
        m_flow_nominal={-20,10,10},
        dp_nominal={-10,10,10})
        annotation (Placement(transformation(extent={{60,50},{80,70}})));
      IBPSA.Fluid.FixedResistances.Junction junction_n3r(
        redeclare package Medium = IBPSA.Media.Water,
        m_flow_nominal={20,-10,-10},
        dp_nominal={10,-10,-10})
        annotation (Placement(transformation(extent={{82,-50},{62,-70}})));
      DisHeatLib.Storage.StorageTank storageTank(
        show_T=true,
        redeclare package Medium = IBPSA.Media.Water,
        VTan=1.57,
        hTan=2,
        dIns=0.1,
        kIns=0.03,
        nSeg=10,
        TemInit=323.15,
        TemRoom=288.15,
        m_flow_nominal=1)
        annotation (Placement(transformation(extent={{-20,16},{-40,36}})));
      IBPSA.Fluid.Movers.FlowControlled_m_flow pump(
        redeclare package Medium = IBPSA.Media.Water,
        energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
        m_flow_nominal=1,
        redeclare IBPSA.Fluid.Movers.Data.Pumps.Wilo.Stratos80slash1to12 per,
        inputType=IBPSA.Fluid.Types.InputType.Continuous,
        addPowerToMedium=false,
        riseTime(displayUnit="min"),
        nominalValuesDefineDefaultPressureCurve=true,
        dp_nominal=1,
        constantMassFlowRate=0.1)
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=0,
            origin={10,20})));
      IBPSA.Fluid.Movers.FlowControlled_m_flow fan(
        redeclare package Medium = IBPSA.Media.Water,
        m_flow_nominal=storageTank.m_flow_nominal,
        redeclare IBPSA.Fluid.Movers.Data.Pumps.Wilo.Stratos80slash1to12 per,
        inputType=IBPSA.Fluid.Types.InputType.Continuous)
        annotation (Placement(transformation(extent={{-50,22},{-70,42}})));
      IBPSA.Fluid.HeatPumps.Carnot_TCon heaPum(
        redeclare package Medium1 = IBPSA.Media.Water,
        redeclare package Medium2 = IBPSA.Media.Water,
        QCon_flow_nominal(displayUnit="kW") = 100000,
        use_eta_Carnot_nominal=true,
        etaCarnot_nominal=0.5,
        dp1_nominal=6000,
        dp2_nominal=6000)
        annotation (Placement(transformation(extent={{-40,-64},{-20,-44}})));
      Modelica.Blocks.Interfaces.RealInput mdot_tank_out annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-10,-110})));

      Modelica.Blocks.Interfaces.RealInput T_condenser_out annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-50,-110})));
      Modelica.Blocks.Interfaces.RealInput mdot_condenser_in annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-90,-110})));
        Modelica.Blocks.Interfaces.RealOutput T_tank_low annotation (Placement(
              transformation(
              extent={{-10,-11},{10,11}},
              rotation=-90,
              origin={60,-105})));
        Modelica.Blocks.Interfaces.RealOutput T_tank_high annotation (Placement(
              transformation(
              extent={{-10,-11},{10,11}},
              rotation=-90,
              origin={90,-105})));
        Modelica.Blocks.Interfaces.RealOutput P_el_heatpump annotation (
          Placement(transformation(
            extent={{-10,-11},{10,11}},
            rotation=-90,
            origin={30,-105})));
        DisHeatLib.Pipes.DualPipe pipe_l1_tank(
        show_T=true,
        redeclare package Medium = IBPSA.Media.Water,
        redeclare DisHeatLib.Pipes.Library.Isoplus.Isoplus_Std_DN100 pipeType,
        L=10,
        nPorts2=1,
        nPorts1=1)
        annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
      Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a port_ht
        annotation (Placement(transformation(extent={{-10,90},{10,110}})));
      equation
      connect(junction_n3s.port_2, port_b1)
        annotation (Line(points={{80,60},{100,60}}, color={0,127,255}));
      connect(storageTank.port_b2, pump.port_a)
        annotation (Line(points={{-20,20},{0,20}},           color={0,127,255}));
      connect(storageTank.port_b1, fan.port_a)
        annotation (Line(points={{-40,32},{-50,32}},
                                                   color={0,127,255}));
      connect(mdot_tank_out, pump.m_flow_in) annotation (Line(points={{-10,-110},
              {-10,-80},{10,-80},{10,8}},   color={0,0,127}));
        connect(T_condenser_out, heaPum.TSet) annotation (Line(points={{-50,
              -110},{-50,-45},{-42,-45}},
                                 color={0,0,127}));
        connect(fan.m_flow_in, mdot_condenser_in) annotation (Line(points={{-60,44},
              {-60,50},{-90,50},{-90,-110}},
                                          color={0,0,127}));
      connect(heaPum.P, P_el_heatpump) annotation (Line(points={{-19,-54},{30,
              -54},{30,-105}}, color={0,0,127}));
      connect(storageTank.TemTank[1], T_tank_high) annotation (Line(points={{
              -30,15.9},{-30,-10},{90,-10},{90,-105}}, color={0,0,127}));
      connect(T_tank_low, storageTank.TemTank[10]) annotation (Line(points={{60,
              -105},{60,-80},{90,-80},{90,-10},{-30,-10},{-30,14.1}}, color={0,
              0,127}));
      connect(pump.port_b, pipe_l1_tank.port_a1) annotation (Line(points={{20,
              20},{30,20},{30,-24},{40,-24}}, color={0,127,255}));
      connect(pipe_l1_tank.ports_b1[1], junction_n3s.port_3) annotation (Line(
            points={{60,-24},{70,-24},{70,50}}, color={0,127,255}));
      connect(junction_n3r.port_3, pipe_l1_tank.port_a2) annotation (Line(
            points={{72,-50},{72,-36},{60,-36}}, color={0,127,255}));
      connect(pipe_l1_tank.ports_b2[1], storageTank.port_a2) annotation (Line(
            points={{40,-36},{-50,-36},{-50,20},{-40,20}}, color={0,127,255}));
      connect(port_ht, pipe_l1_tank.port_ht) annotation (Line(points={{0,100},{
              0,50},{50,50},{50,-20}}, color={191,0,0}));
      connect(heaPum.port_a2, junction_n3r.port_2)
        annotation (Line(points={{-20,-60},{62,-60}}, color={0,127,255}));
      connect(port_b2, heaPum.port_b2)
        annotation (Line(points={{-100,-60},{-40,-60}}, color={0,127,255}));
      connect(junction_n3r.port_1, port_a2)
        annotation (Line(points={{82,-60},{100,-60}}, color={0,127,255}));
      connect(port_a1, junction_n3s.port_1)
        annotation (Line(points={{-100,60},{60,60}}, color={0,127,255}));
      connect(heaPum.port_a1, fan.port_b) annotation (Line(points={{-40,-48},{
              -80,-48},{-80,32},{-70,32}}, color={0,127,255}));
      connect(storageTank.port_a1, heaPum.port_b1) annotation (Line(points={{
              -20,32},{-10,32},{-10,-48},{-20,-48}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={227,221,16},
              fillPattern=FillPattern.Solid,
              radius=15),
            Ellipse(
              extent={{-88,88},{88,-88}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Bitmap(
              extent={{-62,-68},{64,68}},
              imageSource=
                  ""
                   +
                  "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",
              fileName=
                  "modelica://ERIGridMultiEnergyBenchmark/Images/power-to-heat.png")}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
      end PowerToHeat;

    model Bypass
      IBPSA.Fluid.Actuators.Valves.TwoWayLinear val(
        redeclare package Medium = IBPSA.Media.Water,
        m_flow_nominal=m_flow_nominal,
        show_T=true,
        dpValve_nominal=dpValve_nominal)
        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));
      parameter Modelica.SIunits.MassFlowRate m_flow_nominal
        "Nominal mass flow rate";
      parameter Modelica.SIunits.PressureDifference dpValve_nominal
        "Nominal pressure drop of fully open valve, used if CvData=IBPSA.Fluid.Types.CvTypes.OpPoint";
      DisHeatLib.Controls.bypass_control bypass_control
        annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
      IBPSA.Fluid.Sensors.Temperature senTem(redeclare package Medium =
            IBPSA.Media.Water)
        annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
            extends IBPSA.Fluid.Interfaces.PartialTwoPort(
        redeclare package Medium = IBPSA.Media.Water);
    equation
      connect(port_a, val.port_a) annotation (Line(points={{-100,0},{-40,0},{
              -40,-30},{-10,-30}}, color={0,127,255}));
      connect(val.port_b, port_b) annotation (Line(points={{10,-30},{40,-30},{
              40,0},{100,0}}, color={0,127,255}));
      connect(bypass_control.y, val.y)
        annotation (Line(points={{-19,30},{0,30},{0,-18}}, color={0,0,127}));
      connect(bypass_control.T_measurement, senTem.T)
        annotation (Line(points={{-42,30},{-63,30}}, color={0,0,127}));
      connect(port_a, senTem.port) annotation (Line(points={{-100,0},{-70,0},{
              -70,20}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={227,221,16},
              fillPattern=FillPattern.Solid,
              radius=15),
            Ellipse(
              extent={{-88,88},{88,-88}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Bitmap(
              extent={{-70,-56},{70,64}},
              imageSource=
                  "",
              fileName=
                  "modelica://ERIGridMultiEnergyBenchmark/Images/valve.png")}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Bypass;
  end Components;

  package Examples
    model SimpleControl
      DisHeatLib.Controls.storage_control
                                storage_control(
        T_top_set=341.65,
        T_bot_set=323.15,
        T_top_bandwidth=3.5)
        annotation (Placement(transformation(extent={{18,-42},{2,-58}})));
      Modelica.Blocks.Sources.Pulse mdot_tank_out(
        amplitude=1,
        width=50,
        period=7200,
        startTime=3600)
        annotation (Placement(transformation(extent={{20,-90},{0,-70}})));
      Modelica.Blocks.Sources.Constant T_condenser_out(k=273.15 + 75)
        annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));
      Modelica.Blocks.Sources.Constant valve_grid_v1_setpoint(k=1) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-10,70})));
      ThermalNetwork thermalNetwork(fileNameConsumer2=
            "modelica://ERIGridMultiEnergyBenchmark/Resources/heat_demand_load_profile_consumer1_1week.txt",
          fileNameConsumer1=
            "modelica://ERIGridMultiEnergyBenchmark/Resources/heat_demand_load_profile_consumer2_1week.txt")
        annotation (Placement(transformation(extent={{-58,-18},{58,38}})));
    equation
      connect(valve_grid_v1_setpoint.y, thermalNetwork.valve_grid_v1_setpoint)
        annotation (Line(points={{-21,70},{-34,70},{-34,39.5273},{-34.8,39.5273}},
            color={0,0,127}));
      connect(T_condenser_out.y, thermalNetwork.T_condenser_out) annotation (
          Line(points={{-39,-80},{-29,-80},{-29,-19.5273}}, color={0,0,127}));
      connect(mdot_tank_out.y, thermalNetwork.mdot_tank_out) annotation (Line(
            points={{-1,-80},{-11.6,-80},{-11.6,-19.5273}}, color={0,0,127}));
      connect(thermalNetwork.T_tank_low, storage_control.T_bot) annotation (
          Line(points={{29,-20.2909},{29,-46},{19.6,-46}}, color={0,0,127}));
      connect(thermalNetwork.T_tank_high, storage_control.T_top) annotation (
          Line(points={{46.4,-20.2909},{46.4,-54},{19.6,-54}}, color={0,0,127}));
      connect(storage_control.y, thermalNetwork.mdot_condenser_in) annotation (
          Line(points={{1.2,-50},{-46.4,-50},{-46.4,-19.5273}}, color={0,0,127}));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Ellipse(lineColor = {75,138,73},
                    fillColor={255,255,255},
                    fillPattern = FillPattern.Solid,
                    extent={{-100,-100},{100,100}}),
            Polygon(lineColor = {0,0,255},
                    fillColor = {75,138,73},
                    pattern = LinePattern.None,
                    fillPattern = FillPattern.Solid,
                    points={{-36,60},{64,0},{-36,-60},{-36,60}})}),
        Diagram(coordinateSystem(preserveAspectRatio=false)),
        experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
    end SimpleControl;
    annotation (Icon(graphics={
          Rectangle(
            lineColor={200,200,200},
            fillColor={248,248,248},
            fillPattern=FillPattern.HorizontalCylinder,
            extent={{-100,-100},{100,100}},
            radius=25),
          Polygon(
            origin={18,14},
            lineColor={78,138,73},
            fillColor={78,138,73},
            pattern=LinePattern.None,
            fillPattern=FillPattern.Solid,
            points={{-58.0,46.0},{42.0,-14.0},{-58.0,-74.0},{-58.0,46.0}}),
                                         Rectangle(
            extent={{-100,100},{100,-100}},
            lineColor={0,0,0},
            radius=25)}));
  end Examples;
  annotation (uses(
      DisHeatLib(version="1.2"),
      IBPSA(version="3.0.0"),
      Modelica(version="3.2.3")));
end ERIGridMultiEnergyBenchmark;
